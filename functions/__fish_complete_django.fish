# completion for django
function __fish_complete_django -d "Completions for django" --argument-names cmd
    complete -x -c $cmd

    complete -c $cmd -n __fish_use_subcommand -a check -d "Checks the entire Django project for potential problems."
    complete -c $cmd -n __fish_use_subcommand -a compilemessages -d "Compiles .po files to .mo files for use with builtin gettext support."
    complete -c $cmd -n __fish_use_subcommand -a createcachetable -d "Creates the tables needed to use the SQL cache backend."
    complete -c $cmd -n __fish_use_subcommand -a dbshell -d "Runs the command-line client for specified database, or the default database if none is provided."
    complete -c $cmd -n __fish_use_subcommand -a diffsettings -d "Displays differences between the current settings.py and Django's    default settings."
    complete -c $cmd -n __fish_use_subcommand -a dumpdata -d "Output the contents of the database as a fixture of the given format (using each model's default manager unless --all is specified)."
    complete -c $cmd -n __fish_use_subcommand -a flush -d "Removes ALL DATA from the database, including data added during migrations. Does not achieve a \"fresh install\" state."
    complete -c $cmd -n __fish_use_subcommand -a inspectdb -d "Introspects the database tables in the given database and outputs a Django model module."
    complete -c $cmd -n __fish_use_subcommand -a loaddata -d "Installs the named fixture(s) in the database."
    complete -c $cmd -n __fish_use_subcommand -a makemessages -d "Runs over the entire source tree of the current directory and pulls out all strings marked for translation. It creates (or updates) a message file in the conf/locale (in the django tree) or locale (for projects and applications) directory.You must run this command with one of either the --locale, --exclude, or --all options."
    complete -c $cmd -n __fish_use_subcommand -a makemigrations -d "Creates new migration(s) for apps."
    complete -c $cmd -n __fish_use_subcommand -a migrate -d "Updates database schema. Manages both apps with migrations and those without."
    complete -c $cmd -n __fish_use_subcommand -a runserver -d "Starts a lightweight Web server for development."
    complete -c $cmd -n __fish_use_subcommand -a sendtestemail -d "Sends a test email to the email addresses specified as arguments."
    complete -c $cmd -n __fish_use_subcommand -a shell -d "Runs a Python interactive interpreter. Tries to use IPython or bpython, if one of them is available. Any standard input is executed as code."
    complete -c $cmd -n __fish_use_subcommand -a showmigrations -d "Shows all available migrations for the current project"
    complete -c $cmd -n __fish_use_subcommand -a sqlflush -d "Returns a list of the SQL statements required to return all tables in the database to the state they were in just after they were installed."
    complete -c $cmd -n __fish_use_subcommand -a sqlmigrate -d "Prints the SQL statements for the named migration."
    complete -c $cmd -n __fish_use_subcommand -a sqlsequencereset -d "Prints the SQL statements for resetting sequences for the given app name(s)."
    complete -c $cmd -n __fish_use_subcommand -a squashmigrations -d "Squashes an existing set of migrations (from first until specified) into a single new one."
    complete -c $cmd -n __fish_use_subcommand -a startapp -d "Creates a Django app directory structure for the given app name in the current directory or optionally in the given directory."
    complete -c $cmd -n __fish_use_subcommand -a startproject -d "Creates a Django project directory structure for the given project name in the current directory or optionally in the given directory."
    complete -c $cmd -n __fish_use_subcommand -a test -d "Discover and run tests in the specified modules or the current directory."
    complete -c $cmd -n __fish_use_subcommand -a testserver -d "Runs a development server with data from the given fixture(s)."

    complete -c $cmd -n '__fish_seen_subcommand_from check' -l database -d "Run database related checks against these aliases."
    complete -c $cmd -n '__fish_seen_subcommand_from check' -l deploy -d "Check deployment settings."
    complete -c $cmd -n '__fish_seen_subcommand_from check' -l fail-level -d "Message level that will cause the command to exit with a non-zero status. Default is ERROR." -a "CRITICAL ERROR WARNING INFO DEBUG"
    complete -c $cmd -n '__fish_seen_subcommand_from check' -l force-color -d "Force colorization of the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from check' -l list-tags -d "List available tags."
    complete -c $cmd -n '__fish_seen_subcommand_from check' -l no-color -d "Don't colorize the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from check' -l pythonpath -d "A directory to add to the Python path, e.g. \"/home/djangoprojects/myproject\"."
    complete -c $cmd -n '__fish_seen_subcommand_from check' -l settings -d "The Python path to a settings module, e.g. \"myproject.settings.main\". If this isn't provided, the DJANGO_SETTINGS_MODULE environment variable will be used."
    complete -c $cmd -n '__fish_seen_subcommand_from check' -l traceback -d "Raise on CommandError exceptions"
    complete -c $cmd -n '__fish_seen_subcommand_from check' -l version -d "show program's version number and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from check' -s h -l help -d "show this help message and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from check' -s t -l tag -d "Run only checks labeled with given tag."
    complete -c $cmd -n '__fish_seen_subcommand_from check' -s v -l verbosity -d "Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output" -a "0 1 2 3"
    complete -c $cmd -n '__fish_seen_subcommand_from compilemessages' -l force-color -d "Force colorization of the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from compilemessages' -l no-color -d "Don't colorize the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from compilemessages' -l pythonpath -d "A directory to add to the Python path, e.g. \"/home/djangoprojects/myproject\"."
    complete -c $cmd -n '__fish_seen_subcommand_from compilemessages' -l settings -d "The Python path to a settings module, e.g. \"myproject.settings.main\". If this isn't provided, the DJANGO_SETTINGS_MODULE environment variable will be used."
    complete -c $cmd -n '__fish_seen_subcommand_from compilemessages' -l traceback -d "Raise on CommandError exceptions"
    complete -c $cmd -n '__fish_seen_subcommand_from compilemessages' -l version -d "show program's version number and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from compilemessages' -s f -l use-fuzzy -d "Use fuzzy translations."
    complete -c $cmd -n '__fish_seen_subcommand_from compilemessages' -s h -l help -d "show this help message and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from compilemessages' -s i -l ignore -d "Ignore directories matching this glob-style pattern. Use multiple times to ignore more."
    complete -c $cmd -n '__fish_seen_subcommand_from compilemessages' -s l -l locale -d "Locale(s) to process (e.g. de_AT). Default is to process all. Can be used multiple times."
    complete -c $cmd -n '__fish_seen_subcommand_from compilemessages' -s v -l verbosity -d "Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output" -a "0 1 2 3"
    complete -c $cmd -n '__fish_seen_subcommand_from compilemessages' -s x -l exclude -d "Locales to exclude. Default is none. Can be used multiple times."
    complete -c $cmd -n '__fish_seen_subcommand_from createcachetable' -l database -d "Nominates a database onto which the cache tables will be installed. Defaults to the \"default\" database."
    complete -c $cmd -n '__fish_seen_subcommand_from createcachetable' -l dry-run -d "Does not create the table, just prints the SQL that would be run."
    complete -c $cmd -n '__fish_seen_subcommand_from createcachetable' -l force-color -d "Force colorization of the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from createcachetable' -l no-color -d "Don't colorize the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from createcachetable' -l pythonpath -d "A directory to add to the Python path, e.g. \"/home/djangoprojects/myproject\"."
    complete -c $cmd -n '__fish_seen_subcommand_from createcachetable' -l settings -d "The Python path to a settings module, e.g. \"myproject.settings.main\". If this isn't provided, the DJANGO_SETTINGS_MODULE environment variable will be used."
    complete -c $cmd -n '__fish_seen_subcommand_from createcachetable' -l traceback -d "Raise on CommandError exceptions"
    complete -c $cmd -n '__fish_seen_subcommand_from createcachetable' -l version -d "show program's version number and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from createcachetable' -s h -l help -d "show this help message and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from createcachetable' -s v -l verbosity -d "Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output" -a "0 1 2 3"
    complete -c $cmd -n '__fish_seen_subcommand_from dbshell' -l database -d "Nominates a database onto which to open a shell. Defaults to the \"default\" database."
    complete -c $cmd -n '__fish_seen_subcommand_from dbshell' -l force-color -d "Force colorization of the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from dbshell' -l no-color -d "Don't colorize the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from dbshell' -l pythonpath -d "A directory to add to the Python path, e.g. \"/home/djangoprojects/myproject\"."
    complete -c $cmd -n '__fish_seen_subcommand_from dbshell' -l settings -d "The Python path to a settings module, e.g. \"myproject.settings.main\". If this isn't provided, the DJANGO_SETTINGS_MODULE environment variable will be used."
    complete -c $cmd -n '__fish_seen_subcommand_from dbshell' -l traceback -d "Raise on CommandError exceptions"
    complete -c $cmd -n '__fish_seen_subcommand_from dbshell' -l version -d "show program's version number and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from dbshell' -s h -l help -d "show this help message and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from dbshell' -s v -l verbosity -d "Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output" -a "0 1 2 3"
    complete -c $cmd -n '__fish_seen_subcommand_from diffsettings' -l all -d "Display all settings, regardless of their value. In \"hash\" mode, default values are prefixed by \"###\"."
    complete -c $cmd -n '__fish_seen_subcommand_from diffsettings' -l default -d "The settings module to compare the current settings against. Leave empty to compare against Django's default settings."
    complete -c $cmd -n '__fish_seen_subcommand_from diffsettings' -l force-color -d "Force colorization of the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from diffsettings' -l no-color -d "Don't colorize the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from diffsettings' -l output -d "Selects the output format. 'hash' mode displays each changed setting, with the settings that don't appear in the defaults followed by ###. 'unified' mode prefixes the default setting with a minus sign, followed by the changed setting prefixed with a plus sign." -a "hash unified"
    complete -c $cmd -n '__fish_seen_subcommand_from diffsettings' -l pythonpath -d "A directory to add to the Python path, e.g. \"/home/djangoprojects/myproject\"."
    complete -c $cmd -n '__fish_seen_subcommand_from diffsettings' -l settings -d "The Python path to a settings module, e.g. \"myproject.settings.main\". If this isn't provided, the DJANGO_SETTINGS_MODULE environment variable will be used."
    complete -c $cmd -n '__fish_seen_subcommand_from diffsettings' -l traceback -d "Raise on CommandError exceptions"
    complete -c $cmd -n '__fish_seen_subcommand_from diffsettings' -l version -d "show program's version number and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from diffsettings' -s h -l help -d "show this help message and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from diffsettings' -s v -l verbosity -d "Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output" -a "0 1 2 3"
    complete -c $cmd -n '__fish_seen_subcommand_from dumpdata' -l database -d "Nominates a specific database to dump fixtures from. Defaults to the \"default\" database."
    complete -c $cmd -n '__fish_seen_subcommand_from dumpdata' -l force-color -d "Force colorization of the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from dumpdata' -l format -d "Specifies the output serialization format for fixtures."
    complete -c $cmd -n '__fish_seen_subcommand_from dumpdata' -l indent -d "Specifies the indent level to use when pretty-printing output."
    complete -c $cmd -n '__fish_seen_subcommand_from dumpdata' -l natural-foreign -d "Use natural foreign keys if they are available."
    complete -c $cmd -n '__fish_seen_subcommand_from dumpdata' -l natural-primary -d "Use natural primary keys if they are available."
    complete -c $cmd -n '__fish_seen_subcommand_from dumpdata' -l no-color -d "Don't colorize the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from dumpdata' -l pks -d "Only dump objects with given primary keys. Accepts a comma-separated list of keys. This option only works when you specify one model."
    complete -c $cmd -n '__fish_seen_subcommand_from dumpdata' -l pythonpath -d "A directory to add to the Python path, e.g. \"/home/djangoprojects/myproject\"."
    complete -c $cmd -n '__fish_seen_subcommand_from dumpdata' -l settings -d "The Python path to a settings module, e.g. \"myproject.settings.main\". If this isn't provided, the DJANGO_SETTINGS_MODULE environment variable will be used."
    complete -c $cmd -n '__fish_seen_subcommand_from dumpdata' -l skip-checks -d "Skip system checks."
    complete -c $cmd -n '__fish_seen_subcommand_from dumpdata' -l traceback -d "Raise on CommandError exceptions"
    complete -c $cmd -n '__fish_seen_subcommand_from dumpdata' -l version -d "show program's version number and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from dumpdata' -s a -l all -d "Use Django's base manager to dump all models stored in the database, including those that would otherwise be filtered or modified by a custom manager."
    complete -c $cmd -n '__fish_seen_subcommand_from dumpdata' -s e -l exclude -d "An app_label or app_label.ModelName to exclude (use multiple --exclude to exclude multiple apps/models)."
    complete -c $cmd -n '__fish_seen_subcommand_from dumpdata' -s h -l help -d "show this help message and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from dumpdata' -s o -l output -d "Specifies file to which the output is written."
    complete -c $cmd -n '__fish_seen_subcommand_from dumpdata' -s v -l verbosity -d "Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output" -a "0 1 2 3"
    complete -c $cmd -n '__fish_seen_subcommand_from flush' -l database -d "Nominates a database to flush. Defaults to the \"default\" database."
    complete -c $cmd -n '__fish_seen_subcommand_from flush' -l force-color -d "Force colorization of the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from flush' -l no-color -d "Don't colorize the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from flush' -l no-input -d "Tells Django to NOT prompt the user for input of any kind."
    complete -c $cmd -n '__fish_seen_subcommand_from flush' -l pythonpath -d "A directory to add to the Python path, e.g. \"/home/djangoprojects/myproject\"."
    complete -c $cmd -n '__fish_seen_subcommand_from flush' -l settings -d "The Python path to a settings module, e.g. \"myproject.settings.main\". If this isn't provided, the DJANGO_SETTINGS_MODULE environment variable will be used."
    complete -c $cmd -n '__fish_seen_subcommand_from flush' -l skip-checks -d "Skip system checks."
    complete -c $cmd -n '__fish_seen_subcommand_from flush' -l traceback -d "Raise on CommandError exceptions"
    complete -c $cmd -n '__fish_seen_subcommand_from flush' -l version -d "show program's version number and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from flush' -s h -l help -d "show this help message and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from flush' -s v -l verbosity -d "Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output" -a "0 1 2 3"
    complete -c $cmd -n '__fish_seen_subcommand_from inspectdb' -l database -d "Nominates a database to introspect. Defaults to using the \"default\" database."
    complete -c $cmd -n '__fish_seen_subcommand_from inspectdb' -l force-color -d "Force colorization of the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from inspectdb' -l include-partitions -d "Also output models for partition tables."
    complete -c $cmd -n '__fish_seen_subcommand_from inspectdb' -l include-views -d "Also output models for database views."
    complete -c $cmd -n '__fish_seen_subcommand_from inspectdb' -l no-color -d "Don't colorize the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from inspectdb' -l pythonpath -d "A directory to add to the Python path, e.g. \"/home/djangoprojects/myproject\"."
    complete -c $cmd -n '__fish_seen_subcommand_from inspectdb' -l settings -d "The Python path to a settings module, e.g. \"myproject.settings.main\". If this isn't provided, the DJANGO_SETTINGS_MODULE environment variable will be used."
    complete -c $cmd -n '__fish_seen_subcommand_from inspectdb' -l traceback -d "Raise on CommandError exceptions"
    complete -c $cmd -n '__fish_seen_subcommand_from inspectdb' -l version -d "show program's version number and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from inspectdb' -s h -l help -d "show this help message and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from inspectdb' -s v -l verbosity -d "Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output" -a "0 1 2 3"
    complete -c $cmd -n '__fish_seen_subcommand_from loaddata' -l app -d "Only look for fixtures in the specified app."
    complete -c $cmd -n '__fish_seen_subcommand_from loaddata' -l database -d "Nominates a specific database to load fixtures into. Defaults to the \"default\" database."
    complete -c $cmd -n '__fish_seen_subcommand_from loaddata' -l force-color -d "Force colorization of the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from loaddata' -l format -d "Format of serialized data when reading from stdin."
    complete -c $cmd -n '__fish_seen_subcommand_from loaddata' -l no-color -d "Don't colorize the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from loaddata' -l pythonpath -d "A directory to add to the Python path, e.g. \"/home/djangoprojects/myproject\"."
    complete -c $cmd -n '__fish_seen_subcommand_from loaddata' -l settings -d "The Python path to a settings module, e.g. \"myproject.settings.main\". If this isn't provided, the DJANGO_SETTINGS_MODULE environment variable will be used."
    complete -c $cmd -n '__fish_seen_subcommand_from loaddata' -l skip-checks -d "Skip system checks."
    complete -c $cmd -n '__fish_seen_subcommand_from loaddata' -l traceback -d "Raise on CommandError exceptions"
    complete -c $cmd -n '__fish_seen_subcommand_from loaddata' -l version -d "show program's version number and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from loaddata' -s e -l exclude -d "An app_label or app_label.ModelName to exclude. Can be used multiple times."
    complete -c $cmd -n '__fish_seen_subcommand_from loaddata' -s h -l help -d "show this help message and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from loaddata' -s i -l ignorenonexistent -d "Ignores entries in the serialized data for fields that do not currently exist on the model."
    complete -c $cmd -n '__fish_seen_subcommand_from loaddata' -s v -l verbosity -d "Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output" -a "0 1 2 3"
    complete -c $cmd -n '__fish_seen_subcommand_from makemessages' -l add-location -d "Controls '#: filename:line' lines. If the option is 'full' (the default if not given), the lines  include both file name and line number. If it's 'file', the line number is omitted. If it's 'never', the lines are suppressed (same as --no-location). --add-location requires gettext 0.19 or newer." -a "full file never"
    complete -c $cmd -n '__fish_seen_subcommand_from makemessages' -l force-color -d "Force colorization of the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from makemessages' -l keep-pot -d "Keep .pot file after making messages. Useful when debugging."
    complete -c $cmd -n '__fish_seen_subcommand_from makemessages' -l no-color -d "Don't colorize the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from makemessages' -l no-default-ignore -d "Don't ignore the common glob-style patterns 'CVS', '.*', '*~' and '*.pyc'."
    complete -c $cmd -n '__fish_seen_subcommand_from makemessages' -l no-location -d "Don't write '#: filename:line' lines."
    complete -c $cmd -n '__fish_seen_subcommand_from makemessages' -l no-obsolete -d "Remove obsolete message strings."
    complete -c $cmd -n '__fish_seen_subcommand_from makemessages' -l no-wrap -d "Don't break long message lines into several lines."
    complete -c $cmd -n '__fish_seen_subcommand_from makemessages' -l pythonpath -d "A directory to add to the Python path, e.g. \"/home/djangoprojects/myproject\"."
    complete -c $cmd -n '__fish_seen_subcommand_from makemessages' -l settings -d "The Python path to a settings module, e.g. \"myproject.settings.main\". If this isn't provided, the DJANGO_SETTINGS_MODULE environment variable will be used."
    complete -c $cmd -n '__fish_seen_subcommand_from makemessages' -l traceback -d "Raise on CommandError exceptions"
    complete -c $cmd -n '__fish_seen_subcommand_from makemessages' -l version -d "show program's version number and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from makemessages' -s a -l all -d "Updates the message files for all existing locales."
    complete -c $cmd -n '__fish_seen_subcommand_from makemessages' -s d -l domain -d "The domain of the message files (default: \"django\")."
    complete -c $cmd -n '__fish_seen_subcommand_from makemessages' -s e -l extension -d "The file extension(s) to examine (default: \"html,txt,py\", or \"js\" if the domain is \"djangojs\"). Separate multiple extensions with commas, or use -e multiple times."
    complete -c $cmd -n '__fish_seen_subcommand_from makemessages' -s h -l help -d "show this help message and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from makemessages' -s i -l ignore -d "Ignore files or directories matching this glob-style pattern. Use multiple times to ignore more."
    complete -c $cmd -n '__fish_seen_subcommand_from makemessages' -s l -l locale -d "Creates or updates the message files for the given locale(s) (e.g. pt_BR). Can be used multiple times."
    complete -c $cmd -n '__fish_seen_subcommand_from makemessages' -s s -l symlinks -d "Follows symlinks to directories when examining source code and templates for translation strings."
    complete -c $cmd -n '__fish_seen_subcommand_from makemessages' -s v -l verbosity -d "Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output" -a "0 1 2 3"
    complete -c $cmd -n '__fish_seen_subcommand_from makemessages' -s x -l exclude -d "Locales to exclude. Default is none. Can be used multiple times."
    complete -c $cmd -n '__fish_seen_subcommand_from makemigrations' -l check -d "Exit with a non-zero status if model changes are missing migrations."
    complete -c $cmd -n '__fish_seen_subcommand_from makemigrations' -l dry-run -d "Just show what migrations would be made; don't actually write them."
    complete -c $cmd -n '__fish_seen_subcommand_from makemigrations' -l empty -d "Create an empty migration."
    complete -c $cmd -n '__fish_seen_subcommand_from makemigrations' -l force-color -d "Force colorization of the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from makemigrations' -l merge -d "Enable fixing of migration conflicts."
    complete -c $cmd -n '__fish_seen_subcommand_from makemigrations' -l no-color -d "Don't colorize the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from makemigrations' -l no-header -d "Do not add header comments to new migration file(s)."
    complete -c $cmd -n '__fish_seen_subcommand_from makemigrations' -l no-input -d "Tells Django to NOT prompt the user for input of any kind."
    complete -c $cmd -n '__fish_seen_subcommand_from makemigrations' -l pythonpath -d "A directory to add to the Python path, e.g. \"/home/djangoprojects/myproject\"."
    complete -c $cmd -n '__fish_seen_subcommand_from makemigrations' -l settings -d "The Python path to a settings module, e.g. \"myproject.settings.main\". If this isn't provided, the DJANGO_SETTINGS_MODULE environment variable will be used."
    complete -c $cmd -n '__fish_seen_subcommand_from makemigrations' -l skip-checks -d "Skip system checks."
    complete -c $cmd -n '__fish_seen_subcommand_from makemigrations' -l traceback -d "Raise on CommandError exceptions"
    complete -c $cmd -n '__fish_seen_subcommand_from makemigrations' -l version -d "show program's version number and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from makemigrations' -s h -l help -d "show this help message and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from makemigrations' -s n -l name -d "Use this name for migration file(s)."
    complete -c $cmd -n '__fish_seen_subcommand_from makemigrations' -s v -l verbosity -d "Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output" -a "0 1 2 3"
    complete -c $cmd -n '__fish_seen_subcommand_from migrate' -l check -d "Exits with a non-zero status if unapplied migrations exist."
    complete -c $cmd -n '__fish_seen_subcommand_from migrate' -l database -d "Nominates a database to synchronize. Defaults to the \"default\" database."
    complete -c $cmd -n '__fish_seen_subcommand_from migrate' -l fake -d "Mark migrations as run without actually running them."
    complete -c $cmd -n '__fish_seen_subcommand_from migrate' -l fake-initial -d "Detect if tables already exist and fake-apply initial migrations if so. Make sure that the current database schema matches your initial migration before using this flag. Django will only check for an existing table name."
    complete -c $cmd -n '__fish_seen_subcommand_from migrate' -l force-color -d "Force colorization of the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from migrate' -l no-color -d "Don't colorize the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from migrate' -l no-input -d "Tells Django to NOT prompt the user for input of any kind."
    complete -c $cmd -n '__fish_seen_subcommand_from migrate' -l plan -d "Shows a list of the migration actions that will be performed."
    complete -c $cmd -n '__fish_seen_subcommand_from migrate' -l pythonpath -d "A directory to add to the Python path, e.g. \"/home/djangoprojects/myproject\"."
    complete -c $cmd -n '__fish_seen_subcommand_from migrate' -l run-syncdb -d "Creates tables for apps without migrations."
    complete -c $cmd -n '__fish_seen_subcommand_from migrate' -l settings -d "The Python path to a settings module, e.g. \"myproject.settings.main\". If this isn't provided, the DJANGO_SETTINGS_MODULE environment variable will be used."
    complete -c $cmd -n '__fish_seen_subcommand_from migrate' -l skip-checks -d "Skip system checks."
    complete -c $cmd -n '__fish_seen_subcommand_from migrate' -l traceback -d "Raise on CommandError exceptions"
    complete -c $cmd -n '__fish_seen_subcommand_from migrate' -l version -d "show program's version number and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from migrate' -s h -l help -d "show this help message and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from migrate' -s v -l verbosity -d "Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output" -a "0 1 2 3"
    complete -c $cmd -n '__fish_seen_subcommand_from runserver' -l force-color -d "Force colorization of the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from runserver' -l no-color -d "Don't colorize the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from runserver' -l noreload -d "Tells Django to NOT use the auto-reloader."
    complete -c $cmd -n '__fish_seen_subcommand_from runserver' -l nothreading -d "Tells Django to NOT use threading."
    complete -c $cmd -n '__fish_seen_subcommand_from runserver' -l pythonpath -d "A directory to add to the Python path, e.g. \"/home/djangoprojects/myproject\"."
    complete -c $cmd -n '__fish_seen_subcommand_from runserver' -l settings -d "The Python path to a settings module, e.g. \"myproject.settings.main\". If this isn't provided, the DJANGO_SETTINGS_MODULE environment variable will be used."
    complete -c $cmd -n '__fish_seen_subcommand_from runserver' -l traceback -d "Raise on CommandError exceptions"
    complete -c $cmd -n '__fish_seen_subcommand_from runserver' -l version -d "show program's version number and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from runserver' -s 6 -l ipv6 -d "Tells Django to use an IPv6 address."
    complete -c $cmd -n '__fish_seen_subcommand_from runserver' -s h -l help -d "show this help message and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from runserver' -s v -l verbosity -d "Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output" -a "0 1 2 3"
    complete -c $cmd -n '__fish_seen_subcommand_from sendtestemail' -l admins -d "Send a test email to the addresses specified in settings.ADMINS."
    complete -c $cmd -n '__fish_seen_subcommand_from sendtestemail' -l force-color -d "Force colorization of the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from sendtestemail' -l managers -d "Send a test email to the addresses specified in settings.MANAGERS."
    complete -c $cmd -n '__fish_seen_subcommand_from sendtestemail' -l no-color -d "Don't colorize the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from sendtestemail' -l pythonpath -d "A directory to add to the Python path, e.g. \"/home/djangoprojects/myproject\"."
    complete -c $cmd -n '__fish_seen_subcommand_from sendtestemail' -l settings -d "The Python path to a settings module, e.g. \"myproject.settings.main\". If this isn't provided, the DJANGO_SETTINGS_MODULE environment variable will be used."
    complete -c $cmd -n '__fish_seen_subcommand_from sendtestemail' -l skip-checks -d "Skip system checks."
    complete -c $cmd -n '__fish_seen_subcommand_from sendtestemail' -l traceback -d "Raise on CommandError exceptions"
    complete -c $cmd -n '__fish_seen_subcommand_from sendtestemail' -l version -d "show program's version number and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from sendtestemail' -s h -l help -d "show this help message and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from sendtestemail' -s v -l verbosity -d "Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output" -a "0 1 2 3"
    complete -c $cmd -n '__fish_seen_subcommand_from shell' -l force-color -d "Force colorization of the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from shell' -l no-color -d "Don't colorize the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from shell' -l no-startup -d "When using plain Python, ignore the PYTHONSTARTUP environment variable and ~/.pythonrc.py script."
    complete -c $cmd -n '__fish_seen_subcommand_from shell' -l pythonpath -d "A directory to add to the Python path, e.g. \"/home/djangoprojects/myproject\"."
    complete -c $cmd -n '__fish_seen_subcommand_from shell' -l settings -d "The Python path to a settings module, e.g. \"myproject.settings.main\". If this isn't provided, the DJANGO_SETTINGS_MODULE environment variable will be used."
    complete -c $cmd -n '__fish_seen_subcommand_from shell' -l traceback -d "Raise on CommandError exceptions"
    complete -c $cmd -n '__fish_seen_subcommand_from shell' -l version -d "show program's version number and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from shell' -s c -l command -d "Instead of opening an interactive shell, run a command as Django and exit."
    complete -c $cmd -n '__fish_seen_subcommand_from shell' -s h -l help -d "show this help message and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from shell' -s i -l interface -d "Specify an interactive interpreter interface. Available options: \"ipython\", \"bpython\", and \"python\"" -a "ipython bpython python"
    complete -c $cmd -n '__fish_seen_subcommand_from shell' -s v -l verbosity -d "Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output" -a "0 1 2 3"
    complete -c $cmd -n '__fish_seen_subcommand_from showmigrations' -l database -d "Nominates a database to synchronize. Defaults to the \"default\" database."
    complete -c $cmd -n '__fish_seen_subcommand_from showmigrations' -l force-color -d "Force colorization of the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from showmigrations' -l no-color -d "Don't colorize the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from showmigrations' -l pythonpath -d "A directory to add to the Python path, e.g. \"/home/djangoprojects/myproject\"."
    complete -c $cmd -n '__fish_seen_subcommand_from showmigrations' -l settings -d "The Python path to a settings module, e.g. \"myproject.settings.main\". If this isn't provided, the DJANGO_SETTINGS_MODULE environment variable will be used."
    complete -c $cmd -n '__fish_seen_subcommand_from showmigrations' -l skip-checks -d "Skip system checks."
    complete -c $cmd -n '__fish_seen_subcommand_from showmigrations' -l traceback -d "Raise on CommandError exceptions"
    complete -c $cmd -n '__fish_seen_subcommand_from showmigrations' -l version -d "show program's version number and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from showmigrations' -s h -l help -d "show this help message and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from showmigrations' -s l -l list -d "Shows a list of all migrations and which are applied. With a verbosity level of 2 or above, the applied datetimes will be included."
    complete -c $cmd -n '__fish_seen_subcommand_from showmigrations' -s p -l plan -d "Shows all migrations in the order they will be applied. With a verbosity level of 2 or above all direct migration dependencies and reverse dependencies (run_before) will be included."
    complete -c $cmd -n '__fish_seen_subcommand_from showmigrations' -s v -l verbosity -d "Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output" -a "0 1 2 3"
    complete -c $cmd -n '__fish_seen_subcommand_from sqlflush' -l database -d "Nominates a database to print the SQL for. Defaults to the \"default\" database."
    complete -c $cmd -n '__fish_seen_subcommand_from sqlflush' -l force-color -d "Force colorization of the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from sqlflush' -l no-color -d "Don't colorize the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from sqlflush' -l pythonpath -d "A directory to add to the Python path, e.g. \"/home/djangoprojects/myproject\"."
    complete -c $cmd -n '__fish_seen_subcommand_from sqlflush' -l settings -d "The Python path to a settings module, e.g. \"myproject.settings.main\". If this isn't provided, the DJANGO_SETTINGS_MODULE environment variable will be used."
    complete -c $cmd -n '__fish_seen_subcommand_from sqlflush' -l skip-checks -d "Skip system checks."
    complete -c $cmd -n '__fish_seen_subcommand_from sqlflush' -l traceback -d "Raise on CommandError exceptions"
    complete -c $cmd -n '__fish_seen_subcommand_from sqlflush' -l version -d "show program's version number and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from sqlflush' -s h -l help -d "show this help message and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from sqlflush' -s v -l verbosity -d "Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output" -a "0 1 2 3"
    complete -c $cmd -n '__fish_seen_subcommand_from sqlmigrate' -l backwards -d "Creates SQL to unapply the migration, rather than to apply it"
    complete -c $cmd -n '__fish_seen_subcommand_from sqlmigrate' -l database -d "Nominates a database to create SQL for. Defaults to the \"default\" database."
    complete -c $cmd -n '__fish_seen_subcommand_from sqlmigrate' -l force-color -d "Force colorization of the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from sqlmigrate' -l no-color -d "Don't colorize the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from sqlmigrate' -l pythonpath -d "A directory to add to the Python path, e.g. \"/home/djangoprojects/myproject\"."
    complete -c $cmd -n '__fish_seen_subcommand_from sqlmigrate' -l settings -d "The Python path to a settings module, e.g. \"myproject.settings.main\". If this isn't provided, the DJANGO_SETTINGS_MODULE environment variable will be used."
    complete -c $cmd -n '__fish_seen_subcommand_from sqlmigrate' -l skip-checks -d "Skip system checks."
    complete -c $cmd -n '__fish_seen_subcommand_from sqlmigrate' -l traceback -d "Raise on CommandError exceptions"
    complete -c $cmd -n '__fish_seen_subcommand_from sqlmigrate' -l version -d "show program's version number and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from sqlmigrate' -s h -l help -d "show this help message and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from sqlmigrate' -s v -l verbosity -d "Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output" -a "0 1 2 3"
    complete -c $cmd -n '__fish_seen_subcommand_from sqlsequencereset' -l database -d "Nominates a database to print the SQL for. Defaults to the \"default\" database."
    complete -c $cmd -n '__fish_seen_subcommand_from sqlsequencereset' -l force-color -d "Force colorization of the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from sqlsequencereset' -l no-color -d "Don't colorize the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from sqlsequencereset' -l pythonpath -d "A directory to add to the Python path, e.g. \"/home/djangoprojects/myproject\"."
    complete -c $cmd -n '__fish_seen_subcommand_from sqlsequencereset' -l settings -d "The Python path to a settings module, e.g. \"myproject.settings.main\". If this isn't provided, the DJANGO_SETTINGS_MODULE environment variable will be used."
    complete -c $cmd -n '__fish_seen_subcommand_from sqlsequencereset' -l skip-checks -d "Skip system checks."
    complete -c $cmd -n '__fish_seen_subcommand_from sqlsequencereset' -l traceback -d "Raise on CommandError exceptions"
    complete -c $cmd -n '__fish_seen_subcommand_from sqlsequencereset' -l version -d "show program's version number and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from sqlsequencereset' -s h -l help -d "show this help message and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from sqlsequencereset' -s v -l verbosity -d "Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output" -a "0 1 2 3"
    complete -c $cmd -n '__fish_seen_subcommand_from squashmigrations' -l force-color -d "Force colorization of the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from squashmigrations' -l no-color -d "Don't colorize the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from squashmigrations' -l no-header -d "Do not add a header comment to the new squashed migration."
    complete -c $cmd -n '__fish_seen_subcommand_from squashmigrations' -l no-input -d "Tells Django to NOT prompt the user for input of any kind."
    complete -c $cmd -n '__fish_seen_subcommand_from squashmigrations' -l no-optimize -d "Do not try to optimize the squashed operations."
    complete -c $cmd -n '__fish_seen_subcommand_from squashmigrations' -l pythonpath -d "A directory to add to the Python path, e.g. \"/home/djangoprojects/myproject\"."
    complete -c $cmd -n '__fish_seen_subcommand_from squashmigrations' -l settings -d "The Python path to a settings module, e.g. \"myproject.settings.main\". If this isn't provided, the DJANGO_SETTINGS_MODULE environment variable will be used."
    complete -c $cmd -n '__fish_seen_subcommand_from squashmigrations' -l skip-checks -d "Skip system checks."
    complete -c $cmd -n '__fish_seen_subcommand_from squashmigrations' -l squashed-name -d "Sets the name of the new squashed migration."
    complete -c $cmd -n '__fish_seen_subcommand_from squashmigrations' -l traceback -d "Raise on CommandError exceptions"
    complete -c $cmd -n '__fish_seen_subcommand_from squashmigrations' -l version -d "show program's version number and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from squashmigrations' -s h -l help -d "show this help message and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from squashmigrations' -s v -l verbosity -d "Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output" -a "0 1 2 3"
    complete -c $cmd -n '__fish_seen_subcommand_from startapp' -l force-color -d "Force colorization of the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from startapp' -l no-color -d "Don't colorize the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from startapp' -l pythonpath -d "A directory to add to the Python path, e.g. \"/home/djangoprojects/myproject\"."
    complete -c $cmd -n '__fish_seen_subcommand_from startapp' -l settings -d "The Python path to a settings module, e.g. \"myproject.settings.main\". If this isn't provided, the DJANGO_SETTINGS_MODULE environment variable will be used."
    complete -c $cmd -n '__fish_seen_subcommand_from startapp' -l template -d "The path or URL to load the template from."
    complete -c $cmd -n '__fish_seen_subcommand_from startapp' -l traceback -d "Raise on CommandError exceptions"
    complete -c $cmd -n '__fish_seen_subcommand_from startapp' -l version -d "show program's version number and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from startapp' -s e -l extension -d "The file extension(s) to render (default: \"py\"). Separate multiple extensions with commas, or use -e multiple times."
    complete -c $cmd -n '__fish_seen_subcommand_from startapp' -s h -l help -d "show this help message and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from startapp' -s n -l name -d "The file name(s) to render. Separate multiple file names with commas, or use -n multiple times."
    complete -c $cmd -n '__fish_seen_subcommand_from startapp' -s v -l verbosity -d "Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output" -a "0 1 2 3"
    complete -c $cmd -n '__fish_seen_subcommand_from startproject' -l force-color -d "Force colorization of the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from startproject' -l no-color -d "Don't colorize the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from startproject' -l pythonpath -d "A directory to add to the Python path, e.g. \"/home/djangoprojects/myproject\"."
    complete -c $cmd -n '__fish_seen_subcommand_from startproject' -l settings -d "The Python path to a settings module, e.g. \"myproject.settings.main\". If this isn't provided, the DJANGO_SETTINGS_MODULE environment variable will be used."
    complete -c $cmd -n '__fish_seen_subcommand_from startproject' -l template -d "The path or URL to load the template from."
    complete -c $cmd -n '__fish_seen_subcommand_from startproject' -l traceback -d "Raise on CommandError exceptions"
    complete -c $cmd -n '__fish_seen_subcommand_from startproject' -l version -d "show program's version number and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from startproject' -s e -l extension -d "The file extension(s) to render (default: \"py\"). Separate multiple extensions with commas, or use -e multiple times."
    complete -c $cmd -n '__fish_seen_subcommand_from startproject' -s h -l help -d "show this help message and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from startproject' -s n -l name -d "The file name(s) to render. Separate multiple file names with commas, or use -n multiple times."
    complete -c $cmd -n '__fish_seen_subcommand_from startproject' -s v -l verbosity -d "Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output" -a "0 1 2 3"
    complete -c $cmd -n '__fish_seen_subcommand_from test' -l debug-mode -d "Sets settings.DEBUG to True."
    complete -c $cmd -n '__fish_seen_subcommand_from test' -l exclude-tag -d "Do not run tests with the specified tag. Can be used multiple times."
    complete -c $cmd -n '__fish_seen_subcommand_from test' -l failfast -d "Tells Django to stop running the test suite after first failed test."
    complete -c $cmd -n '__fish_seen_subcommand_from test' -l force-color -d "Force colorization of the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from test' -l keepdb -d "Preserves the test DB between runs."
    complete -c $cmd -n '__fish_seen_subcommand_from test' -l no-color -d "Don't colorize the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from test' -l no-input -d "Tells Django to NOT prompt the user for input of any kind."
    complete -c $cmd -n '__fish_seen_subcommand_from test' -l parallel -d "Run tests using up to N parallel processes."
    complete -c $cmd -n '__fish_seen_subcommand_from test' -l pdb -d "Runs a debugger (pdb, or ipdb if installed) on error or failure."
    complete -c $cmd -n '__fish_seen_subcommand_from test' -l pythonpath -d "A directory to add to the Python path, e.g. \"/home/djangoprojects/myproject\"."
    complete -c $cmd -n '__fish_seen_subcommand_from test' -l settings -d "The Python path to a settings module, e.g. \"myproject.settings.main\". If this isn't provided, the DJANGO_SETTINGS_MODULE environment variable will be used."
    complete -c $cmd -n '__fish_seen_subcommand_from test' -l tag -d "Run only tests with the specified tag. Can be used multiple times."
    complete -c $cmd -n '__fish_seen_subcommand_from test' -l testrunner -d "Tells Django to use specified test runner class instead of the one specified by the TEST_RUNNER setting."
    complete -c $cmd -n '__fish_seen_subcommand_from test' -l traceback -d "Raise on CommandError exceptions"
    complete -c $cmd -n '__fish_seen_subcommand_from test' -l version -d "show program's version number and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from test' -s b -l buffer -d "Discard output from passing tests."
    complete -c $cmd -n '__fish_seen_subcommand_from test' -s d -l debug-sql -d "Prints logged SQL queries on failure."
    complete -c $cmd -n '__fish_seen_subcommand_from test' -s h -l help -d "show this help message and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from test' -s k -d "Only run test methods and classes that match the pattern or substring. Can be used multiple times. Same as unittest -k option."
    complete -c $cmd -n '__fish_seen_subcommand_from test' -s p -l pattern -d "The test matching pattern. Defaults to test*.py."
    complete -c $cmd -n '__fish_seen_subcommand_from test' -s r -l reverse -d "Reverses test cases order."
    complete -c $cmd -n '__fish_seen_subcommand_from test' -s t -l top-level-directory -d "Top level of project for unittest discovery."
    complete -c $cmd -n '__fish_seen_subcommand_from test' -s v -l verbosity -d "Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output" -a "0 1 2 3"
    complete -c $cmd -n '__fish_seen_subcommand_from testserver' -l addrport -d "Port number or ipaddr:port to run the server on."
    complete -c $cmd -n '__fish_seen_subcommand_from testserver' -l force-color -d "Force colorization of the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from testserver' -l no-color -d "Don't colorize the command output."
    complete -c $cmd -n '__fish_seen_subcommand_from testserver' -l no-input -d "Tells Django to NOT prompt the user for input of any kind."
    complete -c $cmd -n '__fish_seen_subcommand_from testserver' -l pythonpath -d "A directory to add to the Python path, e.g. \"/home/djangoprojects/myproject\"."
    complete -c $cmd -n '__fish_seen_subcommand_from testserver' -l settings -d "The Python path to a settings module, e.g. \"myproject.settings.main\". If this isn't provided, the DJANGO_SETTINGS_MODULE environment variable will be used."
    complete -c $cmd -n '__fish_seen_subcommand_from testserver' -l traceback -d "Raise on CommandError exceptions"
    complete -c $cmd -n '__fish_seen_subcommand_from testserver' -l version -d "show program's version number and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from testserver' -s 6 -l ipv6 -d "Tells Django to use an IPv6 address."
    complete -c $cmd -n '__fish_seen_subcommand_from testserver' -s h -l help -d "show this help message and exit"
    complete -c $cmd -n '__fish_seen_subcommand_from testserver' -s v -l verbosity -d "Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output" -a "0 1 2 3"
end
